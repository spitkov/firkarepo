name: Check IPA Release

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  check-ipa-releases:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - id: check_releases
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/QwIT-Development/app-legacy/releases/latest")
          
          if [ "$(echo $LATEST_RELEASE | jq -r 'if type=="object" then "yes" else "no" end')" != "yes" ]; then
            echo "is_new=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
          PUBLISHED_AT=$(echo $LATEST_RELEASE | jq -r .published_at)
          IPA_ASSET=$(echo $LATEST_RELEASE | jq -r '.assets[]? | select(.name | endswith(".ipa"))')
          
          if [ -n "$IPA_ASSET" ]; then
            DOWNLOAD_URL=$(echo $IPA_ASSET | jq -r .browser_download_url)
            SIZE=$(echo "scale=0; $(echo $IPA_ASSET | jq -r .size)" | bc)
            SIZE_MB=$(echo "scale=2; $SIZE/1048576" | bc)
            VERSION_DATE=$(date -d "$PUBLISHED_AT" +"%Y-%m-%dT%H:%M:%S%z")
            
            ESIGN_VERSION="${TAG_NAME#v}"
            FEATHER_VERSION="$TAG_NAME"
            
            IS_NEW_ESIGN=false
            IS_NEW_FEATHER=false
            
            if [ ! -f esign.json ]; then
              IS_NEW_ESIGN=true
            else
              LATEST_ESIGN_VERSION=$(jq -r '.apps[0].version // empty' esign.json)
              if [ "$ESIGN_VERSION" != "$LATEST_ESIGN_VERSION" ]; then
                IS_NEW_ESIGN=true
              fi
            fi
            
            if [ ! -f feather.json ]; then
              IS_NEW_FEATHER=true
            else
              LATEST_FEATHER_VERSION=$(jq -r '.apps[0].version // empty' feather.json)
              if [ "$FEATHER_VERSION" != "$LATEST_FEATHER_VERSION" ]; then
                IS_NEW_FEATHER=true
              fi
            fi
            
            if [ "$IS_NEW_ESIGN" = true ] || [ "$IS_NEW_FEATHER" = true ]; then
              echo "is_new=true" >> $GITHUB_OUTPUT
              echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
              echo "esign_version=$ESIGN_VERSION" >> $GITHUB_OUTPUT
              echo "feather_version=$FEATHER_VERSION" >> $GITHUB_OUTPUT
              echo "published=$VERSION_DATE" >> $GITHUB_OUTPUT
              echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
              echo "size=$SIZE" >> $GITHUB_OUTPUT
              echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
            else
              echo "is_new=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_new=false" >> $GITHUB_OUTPUT
          fi

      - if: steps.check_releases.outputs.is_new == 'true'
        run: |
          # Update esign.json
          if [ ! -f esign.json ]; then
            echo '{"name":"Firka","identifier":"app.firka.legacy","sourceURL":"https://git.spitkov.hu/spitkov/firkaipa","apps":[]}' > esign.json
          fi
          
          NEW_ESIGN_ENTRY=$(jq -n \
            --arg tag "${{ steps.check_releases.outputs.esign_version }}" \
            --arg date "${{ steps.check_releases.outputs.published }}" \
            --arg url "${{ steps.check_releases.outputs.download_url }}" \
            --arg size "${{ steps.check_releases.outputs.size_mb }}" \
            '{
              "name": "Firka",
              "bundleIdentifier": "app.firka.legacy",
              "developerName": "QwIT-Development",
              "version": $tag,
              "versionDate": $date,
              "versionDescription": "Egy alternatív e-KRÉTA app",
              "downloadURL": $url,
              "localizedDescription": "Firka App",
              "iconURL": "https://github.com/QwIT-Development/app-legacy/blob/master/refilc/assets/icons/ic_android.png?raw=true",
              "tintColor": "018084",
              "isLanZouCloud": 0,
              "size": ($size | tonumber),
              "type": 1
            }')
          
          jq --argjson new "$NEW_ESIGN_ENTRY" '.apps = [$new] + .apps' esign.json > esign.json.tmp && mv esign.json.tmp esign.json
          
          # Update feather.json
          if [ ! -f feather.json ]; then
            echo '{
              "name": "Firka Repository",
              "identifier": "app.firka.legacy-repo",
              "iconURL": "https://github.com/QwIT-Development/app-legacy/blob/master/refilc/assets/icons/ic_android.png?raw=true",
              "apps": []
            }' > feather.json
          fi
          
          NEW_VERSION=$(jq -n \
            --arg version "${{ steps.check_releases.outputs.feather_version }}" \
            --arg date "${{ steps.check_releases.outputs.published }}" \
            --arg url "${{ steps.check_releases.outputs.download_url }}" \
            --arg size "${{ steps.check_releases.outputs.size }}" \
            '{
              "version": $version,
              "date": $date,
              "size": ($size | tonumber),
              "downloadURL": $url
            }')
          
          jq --argjson newver "$NEW_VERSION" '
            .apps = if (.apps | length) == 0 then
              [{
                "name": "Firka",
                "bundleIdentifier": "app.firka.legacy",
                "developerName": "QwIT-Development",
                "iconURL": "https://github.com/QwIT-Development/app-legacy/blob/master/refilc/assets/icons/ic_android.png?raw=true",
                "localizedDescription": "Egy alternatív e-KRÉTA app",
                "subtitle": "Alternative e-KRÉTA client",
                "tintColor": "018084",
                "versions": [$newver],
                "size": $newver.size,
                "version": $newver.version,
                "versionDate": $newver.date,
                "downloadURL": $newver.downloadURL,
                "appPermissions": {},
                "screenshotURLs": [
                  "https://github.com/spitkov/firkarepo/blob/main/1.PNG?raw=true,
                  "https://github.com/spitkov/firkarepo/blob/main/2.PNG?raw=true,
                  "https://github.com/spitkov/firkarepo/blob/main/3.PNG?raw=true

                ]
              }]
            else
              [.apps[0] | .versions = [$newver] + .versions | 
                          .version = $newver.version |
                          .versionDate = $newver.date |
                          .downloadURL = $newver.downloadURL |
                          .size = $newver.size]
            end' feather.json > feather.json.tmp && mv feather.json.tmp feather.json
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add esign.json feather.json
          git commit -m "Update repos with new IPA release ${{ steps.check_releases.outputs.tag }}"
          git push
